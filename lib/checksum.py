# References:
# "Error detecting decimal codes", Verhoeff, 1969
# "Error detection methods", Gallian, 1996


# multiplication table for Dihedral group of order 26, using GAP software:
# MultiplicationTable(DihedralGroup(26));
# < a, b | a^n = b^2 = e, ab = ba^-1 >
# order: e, b, a, ba, a^2, ba^2, a^3, ba^4, a^4, ba^4, ...
M = [ [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ], [ 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19,
      22, 21, 24, 23, 26, 25 ], [ 3, 26, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 1, 24 ],
  [ 4, 25, 6, 1, 8, 3, 10, 5, 12, 7, 14, 9, 16, 11, 18, 13, 20, 15, 22, 17, 24, 19, 26, 21, 2, 23 ], [ 5, 24, 7, 26, 9, 2, 11, 4, 13, 6, 15, 8, 17, 10, 19, 12, 21, 14, 23,
      16, 25, 18, 1, 20, 3, 22 ], [ 6, 23, 8, 25, 10, 1, 12, 3, 14, 5, 16, 7, 18, 9, 20, 11, 22, 13, 24, 15, 26, 17, 2, 19, 4, 21 ],
  [ 7, 22, 9, 24, 11, 26, 13, 2, 15, 4, 17, 6, 19, 8, 21, 10, 23, 12, 25, 14, 1, 16, 3, 18, 5, 20 ], [ 8, 21, 10, 23, 12, 25, 14, 1, 16, 3, 18, 5, 20, 7, 22, 9, 24, 11, 26,
      13, 2, 15, 4, 17, 6, 19 ], [ 9, 20, 11, 22, 13, 24, 15, 26, 17, 2, 19, 4, 21, 6, 23, 8, 25, 10, 1, 12, 3, 14, 5, 16, 7, 18 ],
  [ 10, 19, 12, 21, 14, 23, 16, 25, 18, 1, 20, 3, 22, 5, 24, 7, 26, 9, 2, 11, 4, 13, 6, 15, 8, 17 ], [ 11, 18, 13, 20, 15, 22, 17, 24, 19, 26, 21, 2, 23, 4, 25, 6, 1, 8, 3,
      10, 5, 12, 7, 14, 9, 16 ], [ 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 1, 24, 3, 26, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15 ],
  [ 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14 ], [ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 2, 3, 4, 5, 6,
      7, 8, 9, 10, 11, 12, 13 ], [ 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 1, 26, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12 ],
  [ 16, 13, 18, 15, 20, 17, 22, 19, 24, 21, 26, 23, 2, 25, 4, 1, 6, 3, 8, 5, 10, 7, 12, 9, 14, 11 ], [ 17, 12, 19, 14, 21, 16, 23, 18, 25, 20, 1, 22, 3, 24, 5, 26, 7, 2, 9,
      4, 11, 6, 13, 8, 15, 10 ], [ 18, 11, 20, 13, 22, 15, 24, 17, 26, 19, 2, 21, 4, 23, 6, 25, 8, 1, 10, 3, 12, 5, 14, 7, 16, 9 ],
  [ 19, 10, 21, 12, 23, 14, 25, 16, 1, 18, 3, 20, 5, 22, 7, 24, 9, 26, 11, 2, 13, 4, 15, 6, 17, 8 ], [ 20, 9, 22, 11, 24, 13, 26, 15, 2, 17, 4, 19, 6, 21, 8, 23, 10, 25, 12,
      1, 14, 3, 16, 5, 18, 7 ], [ 21, 8, 23, 10, 25, 12, 1, 14, 3, 16, 5, 18, 7, 20, 9, 22, 11, 24, 13, 26, 15, 2, 17, 4, 19, 6 ],
  [ 22, 7, 24, 9, 26, 11, 2, 13, 4, 15, 6, 17, 8, 19, 10, 21, 12, 23, 14, 25, 16, 1, 18, 3, 20, 5 ], [ 23, 6, 25, 8, 1, 10, 3, 12, 5, 14, 7, 16, 9, 18, 11, 20, 13, 22, 15,
      24, 17, 26, 19, 2, 21, 4 ], [ 24, 5, 26, 7, 2, 9, 4, 11, 6, 13, 8, 15, 10, 17, 12, 19, 14, 21, 16, 23, 18, 25, 20, 1, 22, 3 ],
  [ 25, 4, 1, 6, 3, 8, 5, 10, 7, 12, 9, 14, 11, 16, 13, 18, 15, 20, 17, 22, 19, 24, 21, 26, 23, 2 ], [ 26, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21,
      20, 23, 22, 25, 24, 1 ] ]

for x in range(len(M)):
    for y in range(len(M)):
        M[x][y] -= 1

# permutation function
# p(a^i) = a^(2-i)
# p(ba^i) = ba^i

p = [4, 1, 2, 3, 0, 5, 24, 7, 22, 9, 20, 11, 18, 13, 16, 15, 14, 17, 12, 19, 10, 21, 8, 23, 6, 25]

def p_k(x, k):
    y = x
    for r in range(k):
        y = p[y]
    return y

def verify(x):
    x = [ord(c)-65 for c in x]
    for v in x:
        assert(v >= 0 and v < 26)
    val = 0
    for k in range(len(x)):
        val = M[val][p_k(x[k],k+1)]
    return val == 0

def compute(x):
    x = [ord(c)-65 for c in x]
    for v in x:
        assert(v >= 0 and v < 26)
    val = 0
    for k in range(len(x)):
        val = M[val][p_k(x[k],k+1)]
    for k in range(len(M)):
        el = p_k(k,len(x)+1)
        if M[val][el] == 0:
            return chr(k+65)
    assert(False)
