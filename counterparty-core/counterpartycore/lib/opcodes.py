# push value
def to_bytes(i):
    return i.to_bytes(1, "big")


OP_0 = to_bytes(0x00)
OP_FALSE = OP_0
OP_PUSHDATA1 = to_bytes(0x4C)
OP_PUSHDATA2 = to_bytes(0x4D)
OP_PUSHDATA4 = to_bytes(0x4E)
OP_1NEGATE = to_bytes(0x4F)
OP_RESERVED = to_bytes(0x50)
OP_1 = to_bytes(0x51)
OP_TRUE = OP_1
OP_2 = to_bytes(0x52)
OP_3 = to_bytes(0x53)
OP_4 = to_bytes(0x54)
OP_5 = to_bytes(0x55)
OP_6 = to_bytes(0x56)
OP_7 = to_bytes(0x57)
OP_8 = to_bytes(0x58)
OP_9 = to_bytes(0x59)
OP_10 = to_bytes(0x5A)
OP_11 = to_bytes(0x5B)
OP_12 = to_bytes(0x5C)
OP_13 = to_bytes(0x5D)
OP_14 = to_bytes(0x5E)
OP_15 = to_bytes(0x5F)
OP_16 = to_bytes(0x60)

# control
OP_NOP = to_bytes(0x61)
OP_VER = to_bytes(0x62)
OP_IF = to_bytes(0x63)
OP_NOTIF = to_bytes(0x64)
OP_VERIF = to_bytes(0x65)
OP_VERNOTIF = to_bytes(0x66)
OP_ELSE = to_bytes(0x67)
OP_ENDIF = to_bytes(0x68)
OP_VERIFY = to_bytes(0x69)
OP_RETURN = to_bytes(0x6A)

# stack ops
OP_TOALTSTACK = to_bytes(0x6B)
OP_FROMALTSTACK = to_bytes(0x6C)
OP_2DROP = to_bytes(0x6D)
OP_2DUP = to_bytes(0x6E)
OP_3DUP = to_bytes(0x6F)
OP_2OVER = to_bytes(0x70)
OP_2ROT = to_bytes(0x71)
OP_2SWAP = to_bytes(0x72)
OP_IFDUP = to_bytes(0x73)
OP_DEPTH = to_bytes(0x74)
OP_DROP = to_bytes(0x75)
OP_DUP = to_bytes(0x76)
OP_NIP = to_bytes(0x77)
OP_OVER = to_bytes(0x78)
OP_PICK = to_bytes(0x79)
OP_ROLL = to_bytes(0x7A)
OP_ROT = to_bytes(0x7B)
OP_SWAP = to_bytes(0x7C)
OP_TUCK = to_bytes(0x7D)

# splice ops
OP_CAT = to_bytes(0x7E)
OP_SUBSTR = to_bytes(0x7F)
OP_LEFT = to_bytes(0x80)
OP_RIGHT = to_bytes(0x81)
OP_SIZE = to_bytes(0x82)

# bit logic
OP_INVERT = to_bytes(0x83)
OP_AND = to_bytes(0x84)
OP_OR = to_bytes(0x85)
OP_XOR = to_bytes(0x86)
OP_EQUAL = to_bytes(0x87)
OP_EQUALVERIFY = to_bytes(0x88)
OP_RESERVED1 = to_bytes(0x89)
OP_RESERVED2 = to_bytes(0x8A)

# numeric
OP_1ADD = to_bytes(0x8B)
OP_1SUB = to_bytes(0x8C)
OP_2MUL = to_bytes(0x8D)
OP_2DIV = to_bytes(0x8E)
OP_NEGATE = to_bytes(0x8F)
OP_ABS = to_bytes(0x90)
OP_NOT = to_bytes(0x91)
OP_0NOTEQUAL = to_bytes(0x92)

OP_ADD = to_bytes(0x93)
OP_SUB = to_bytes(0x94)
OP_MUL = to_bytes(0x95)
OP_DIV = to_bytes(0x96)
OP_MOD = to_bytes(0x97)
OP_LSHIFT = to_bytes(0x98)
OP_RSHIFT = to_bytes(0x99)

OP_BOOLAND = to_bytes(0x9A)
OP_BOOLOR = to_bytes(0x9B)
OP_NUMEQUAL = to_bytes(0x9C)
OP_NUMEQUALVERIFY = to_bytes(0x9D)
OP_NUMNOTEQUAL = to_bytes(0x9E)
OP_LESSTHAN = to_bytes(0x9F)
OP_GREATERTHAN = to_bytes(0xA0)
OP_LESSTHANOREQUAL = to_bytes(0xA1)
OP_GREATERTHANOREQUAL = to_bytes(0xA2)
OP_MIN = to_bytes(0xA3)
OP_MAX = to_bytes(0xA4)

OP_WITHIN = to_bytes(0xA5)

# crypto
OP_RIPEMD160 = to_bytes(0xA6)
OP_SHA1 = to_bytes(0xA7)
OP_SHA256 = to_bytes(0xA8)
OP_HASH160 = to_bytes(0xA9)
OP_HASH256 = to_bytes(0xAA)
OP_CODESEPARATOR = to_bytes(0xAB)
OP_CHECKSIG = to_bytes(0xAC)
OP_CHECKSIGVERIFY = to_bytes(0xAD)
OP_CHECKMULTISIG = to_bytes(0xAE)
OP_CHECKMULTISIGVERIFY = to_bytes(0xAF)

# expansion
OP_NOP1 = to_bytes(0xB0)
OP_NOP2 = to_bytes(0xB1)
OP_CHECKLOCKTIMEVERIFY = OP_NOP2
OP_NOP3 = to_bytes(0xB2)
OP_CHECKSEQUENCEVERIFY = OP_NOP3
OP_NOP4 = to_bytes(0xB3)
OP_NOP5 = to_bytes(0xB4)
OP_NOP6 = to_bytes(0xB5)
OP_NOP7 = to_bytes(0xB6)
OP_NOP8 = to_bytes(0xB7)
OP_NOP9 = to_bytes(0xB8)
OP_NOP10 = to_bytes(0xB9)

# template matching params
OP_SMALLINTEGER = to_bytes(0xFA)
OP_PUBKEYS = to_bytes(0xFB)
OP_PUBKEYHASH = to_bytes(0xFD)
OP_PUBKEY = to_bytes(0xFE)

OP_INVALIDOPCODE = to_bytes(0xFF)
